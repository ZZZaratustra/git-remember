git config  --global user.name "Varlamov Andrei"


git config  --global user.email varlamcheg@inbox.ru
git config --list //q-for exit

cd mkdir
echo "Some text" > file.txt
ls // spisok filov v papke
cat file.txt // chtenie
rm file.txt // delete

git init // make git repozitoriy
ls -la       //see secret directory and filesgit
ls -Force   //(Powershell)

Основаня ветка - main //git branch -m <name>

git status //index status

Раб дир - файлы и папки
Индекс - файлы до того как мы хотим их сохранить в репозиторий / подготовка к сохр
Репозиторий - сохраняются все версии и комиты-указатели на опр версии

Working dir                 staging area            repository
Рабочая директория          Индекс                  Репозиторий

git add .              ->   Индекс

                            git commit         ->   Репозиторий
                            (сохр изменений)

            <-------------------------------------- git checkout
                   (перейти к опр версии проекта)


git add commit checkout

Status:     Untracked(неотслеживаемый)- ф-лы кот-е только добавили
            Staged(Подготовленный) - в индексе/ для сохр в изменений
            Unmodified - git status не увидим названия фйла - не изменен
            Modified

Объекты гит:
            Blob - file
            Tree - papka
            Commit - commit(когда сохраняем тек версии проекта)
            Annotated tag - аннотированный тег

каждый обьект имеет уникальный хэш SHA1
вх.данные -> SHA1 hash-func -> 4432...234-> Фиксированная длина 160 бит(40 шестнадцетиричных символов)

Коммит - указатель на дерево

перемещая HEAD - перемещаемся меж комитами и видим другую историю
обычно HEAD - указатель на ветку Main а ветка ссылка на коммит

    git status - текущее состояние репозитория
    git add <file name>
    git commit -m "<message>" // -m - make mess in cmd
    git log                             //история изменений комитов
    git checkout <commit hash> //переxод на опр версию проекта по SHA1 хэшу коммита
//видим изменения в раб директории
    git checkout <branch name>


    git add .
    git status
    git commit -m "First commit"
    git status
    git log
         cd .git
         ls
         cd objects
         ls
         git log //cf... - начало хэша
         cd cf
         ls
         git log // первые два cf - потом остальное название файла
         cat 1c8e3b8d6152dfc778faeb529f58136b631eb9 //бинарная хня
               //читаем содерж объектов гит
            git cat-file -t cf1c8e3 //читаем содерж объектов гит
                //commit
            git cat-file -p cf1c8e3
                //tree e547107f081ef0e4a2340004f15d1868a80173da
                //author Varlamov Andrei <varlamcheg@inbox.ru> 1666038034 +0300
                //committer Varlamov Andrei <varlamcheg@inbox.ru> 1666038034 +0300
            //СМОТРИМ НА ДЕРЕВО
            git cat-file -t e547107
                //tree
            git cat-file -p e547107
                //040000 tree 46308d3c547a3f9473092e9281d56b9c572da26e    .idea
                //100644 blob ac54b20c20ff83adb2de7931356bf8b207cbe555    first-file.txt
                //040000 tree 32ef472c6b7a64d9f397090249af49dc12c896e2    first-subfolder
                //100644 blob 932f35fac460ae62441558f0f6ef6fac6ab0f312    git.txt
            //СМОТРИМ БЛОБ
                git cat-file -t 932f35fac460
                    //blob
                git cat-file -p 932f35fac460
                    //to chto vnutri txt
    rm first-file.txt
    git status
    mkdir second-subfolder
    cd second-subfolder
    echo "Fourth file text" > fourth-file.txt
    echo "Fifth file text" > fifth-file.txt
    ls
    cd ..
    ls
    git status
        git add .
        git status
    git commit -m "Second commit"
        git status
        git log //2 commita - last sverhu


            cd ../..   //на две папки назад

        git log
        git checkout cf1c8e
<<<<<<< HEAD
=======
        //Ветка -ссылка на коммит
    Создание ветки
        git branch <branch name>
        git checkout -b <branch name> // создаст ветку и перейдет
        git branch - все ветки
        git branch -m <new branch name>
        git branch -d <branch name> //текущую удалить нельзя
    Слияие веток
        //merge commit
    !!!!    git merge <feature branch name> // feature c текущей(receiving branch)
>>>>>>> new-feature
